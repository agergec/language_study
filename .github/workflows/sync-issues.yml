name: Sync Issues

on:
  push:
    paths:
      - 'issues/issues.json'
      - '.github/workflows/sync-issues.yml'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create/update issues from JSON
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const filePath = path.join(process.env.GITHUB_WORKSPACE, 'issues', 'issues.json');
            if (!fs.existsSync(filePath)) {
              core.setFailed('issues/issues.json not found');
            }
            const raw = fs.readFileSync(filePath, 'utf8');
            let items;
            try {
              items = JSON.parse(raw);
            } catch (e) {
              core.setFailed('issues/issues.json is not valid JSON: ' + e.message);
            }
            if (!Array.isArray(items)) {
              core.setFailed('issues/issues.json must be a JSON array of objects');
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch existing open issues (paginate if needed)
            const existing = await github.paginate(github.rest.issues.listForRepo, {
              owner, repo, state: 'open', per_page: 100
            });
            const existingTitles = new Set(existing.map(i => i.title));

            for (const item of items) {
              if (!item || !item.title) {
                core.warning('Skipping item without title');
                continue;
              }
              if (existingTitles.has(item.title)) {
                core.info(`Skipping existing issue: ${item.title}`);
                continue;
              }

              const body = item.body || '';
              const assignees = Array.isArray(item.assignees) ? item.assignees : [];
              const milestone = item.milestone || undefined;
              const labels = Array.isArray(item.labels) ? item.labels : [];

              const created = await github.rest.issues.create({ owner, repo, title: item.title, body, assignees, milestone });
              const number = created.data.number;

              if (labels.length) {
                try {
                  await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels });
                } catch (err) {
                  core.warning(`Could not add labels to #${number}: ${err.message}`);
                }
              }

              core.info(`Created #${number}: ${item.title}`);
            }
